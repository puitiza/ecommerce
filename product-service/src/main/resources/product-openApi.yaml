openapi: 3.0.1
info:
  title: Product Service API
  version: 1.0.0
servers:
  - url: http://localhost:8082
security:
  - Auth-JWT: []
paths:
  /products:
    post:
      summary: Creates a new product.
      security:
        - Auth-JWT: [ADMIN]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid product data.
          content:
            application/json:
              example:
                message: "Missing required field: name"
        403:
          description: Access denied. Only admin users can create products.
          content:
            application/json:
              example:
                message: "Unauthorized access"


    get:
      summary: Gets all products.
      security:
        - Auth-JWT: []
      responses:
        200:
          description: Products retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      summary: Gets details of a specific product.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Product details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found.

    put:
      summary: Updates an existing product.
      security:
        - Auth-JWT: [ADMIN]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid product update data.
          content:
            application/json:
              example:
                message: "Price cannot be negative."
        403:
          description: Access denied. Only admin users can update products.
          content:
            application/json:
              example:
                message: "Unauthorized access"
        404:
          description: Product not found.
    delete:
      summary: Deletes a product.
      security:
        - Auth-JWT: [ADMIN]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: Product deleted successfully.
        403:
          description: Access denied. Only admin users can delete products.
          content:
            application/json:
              example:
                message: "Unauthorized access"
        404:
          description: Product not found.

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the product.
        name:
          type: string
          description: Name of the product.
          example: "T-Shirt"
        description:
          type: string
          description: Description of the product.
          example: "A comfortable and stylish T-Shirt."
        price:
          type: number
          description: Price of the product.
          example: 29.99
        inventory:
          type: integer
          description: Current inventory level of the product.
          example: 100
        image:
          type: string
          description: URL of the product image.
          example: "https://example.com/product-image.png"
        categories:
          type: array
          description: List of categories the product belongs to.
          example: ["Clothing", "T-Shirts"]
        additional_data:
          type: object
          description: Additional data specific to the product.
          example: {"color": "Red", "size": "M"}
  securitySchemes:
    Auth-JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT