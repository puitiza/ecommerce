openapi: 3.0.1
info:
  title: Order Service API
  version: 1.0.0
servers:
  - url: http://localhost:8081
security:
  - Auth-JWT: []
paths:
  /orders:
    post:
      summary: Creates a new order.
      security:
        - Auth-JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: ID of the user who placed the order
                  example: 1
                items:
                  type: array
                  description: List of ordered items
                  example:
                    - productId: 2
                      quantity: 3
                    - productId: 5
                      quantity: 1
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                        description: ID of the ordered product
                        example: 2
                      quantity:
                        type: integer
                        description: Quantity of the ordered product
                        example: 3
      responses:
        201:
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid order request (e.g., missing information, invalid product ID)
          content:
            application/json:
              example:
                data: null
                success: false
                exception:
                  status: 404
                  timestamp: 28-06-2022 10:37:06 PET
                  errorCode: PC-0002
                  message: "Missing required field: userId"
                  stackTrace: []
                  errors: []
                  debugMessage: null
        409:
          description: Insufficient product availability
          content:
            application/json:
              example:
                data: null
                success: false
                exception:
                  status: 404
                  timestamp: 28-06-2022 10:37:06 PET
                  errorCode: PC-0002
                  message: "Product with ID {0} has insufficient stock (only 2 available)"
                  stackTrace: []
                  errors: []
                  debugMessage: null

    get:
      summary: Gets all orders.
      security:
        - Auth-JWT: []
      responses:
        200:
          description: Orders retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      summary: Gets details of a specific order.
      security:
        - Auth-JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        200:
          description: Order details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found.
          content:
            application/json:
              example:
                data: null
                success: false
                exception:
                  status: 404
                  timestamp: 28-06-2022 10:37:06 PET
                  errorCode: PC-0001
                  message: "Order with id {0} not found"
                  stackTrace: []
                  errors: []
                  debugMessage: null

    put:
      summary: Updates an existing order.
      security:
        - Auth-JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: ID of the user who placed the order (optional)
                  example: 2
                items:
                  type: array
                  description: List of ordered items (optional)
                  example:
                    - productId: 3
                      quantity: 2
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                        description: ID of the ordered product (optional)
                        example: 3
                      quantity:
                        type: integer
                        description: Quantity of the ordered product (optional)
                        example: 2
                status:
                  type: string
                  description: New status of the order (optional)
                  example: "SHIPPED"
      responses:
        200:
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid update request (e.g., invalid status)
          content:
            application/json:
              example:
                data: null
                success: false
                exception:
                  status: 404
                  timestamp: 28-06-2022 10:37:06 PET
                  errorCode: PC-0001
                  message: "Invalid status value: 'INVALID'"
                  stackTrace: []
                  errors: []
                  debugMessage: null
        404:
          description: Order not found.

    delete:
      summary: Cancels an order.
      security:
        - Auth-JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        204:
          description: Order cancelled successfully.
        400:
          description: Order cannot be cancelled (e.g., already shipped)
          content:
            application/json:
              example:
                data: null
                success: false
                exception:
                  status: 404
                  timestamp: 28-06-2022 10:37:06 PET
                  errorCode: PC-0001
                  message: "Order with ID {1} cannot be cancelled as it is already shipped"
                  stackTrace: []
                  errors: []
                  debugMessage: null
  /orders/user/{id}:
    get:
      summary: Gets all orders for a specific user.
      security:
        - Auth-JWT: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        200:
          description: Orders retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        404:
          description: User not found.

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the order.
        userId:
          type: integer
          description: ID of the user who placed the order.
        items:
          type: array
          description: List of ordered items.
          items:
            type: object
            properties:
              productId:
                type: integer
                description: ID of the ordered product.
              quantity:
                type: integer
                description: Quantity of the ordered product.
        createdAt:
          type: string
          format: date-time
          description: Date and time when the order was created.
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the order was last updated.
        status:
          type: string
          enum: [PLACED, PAID, SHIPPED, DELIVERED, CANCELLED]
          description: Current status of the order.
        totalPrice:
          type: number
          description: Total price of the order.
        shippingAddress:
          type: string
          description: Shipping address for the order.

  securitySchemes:
    Auth-JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT