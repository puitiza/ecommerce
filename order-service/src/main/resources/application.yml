spring:
  application:
    name: order-service
  profiles:
    active: dev
  config:
    import: optional:configserver:${CONFIG_SERVER_URL:http://localhost:8885}
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${keycloak.realm.url}
  datasource:
    url: jdbc:mysql://localhost:3307/order_db?useSSL=false&allowPublicKeyRetrieval=true
    username: order_user
    password: order_password
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update
  kafka:
    client-id: order-service
    bootstrap-servers: ${KAFKA_SERVER_URL:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.cloudevents.kafka.CloudEventSerializer
      properties:
        max.request.size: 1000000 # Max size of a single request (1MB)
        metadata.max.idle.ms: 180000 # Time to wait for metadata (3min)
        request.timeout.ms: 30000 # Timeout for a request to the server
        retries: 10               # Number of retries on failed requests.
        retry.backoff.ms: 10000   # Time to wait before retrying.
        retry.backoff.max.ms: 10000
    consumer:
      group-id: order-service-group
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: io.cloudevents.kafka.CloudEventDeserializer
        metadata.max.age.ms: 180000
        connections.max.idle.ms: 180000
      auto-offset-reset: latest # Where to start consuming if no offset is committed.
      enable-auto-commit: false # Disable auto-commit for manual offset control.
      max-poll-records: 100  # Max records to fetch in a single poll.
      fetch-min-size: 1      # Min data to wait for in bytes.
      fetch-max-wait: 500    # Max time to wait for min data.

# Publicly accessible URLs (Swagger and actuator endpoints)
security:
  permit-urls:
    swagger:
      - /orders/v3/api-docs/**
      - /orders/swagger-ui/**
      - /orders/swagger-ui.html
      - /favicon.ico
    actuator:
      - /actuator/health/**
      - /actuator/info/**
      - /actuator/env/**
      - /actuator/configprops/**

# Springdoc OpenAPI and Swagger UI configuration
springdoc:
  base-path: /orders
  api-docs:
    enabled: true
    path: ${springdoc.base-path}/v3/api-docs
  swagger-ui:
    enabled: true
    path: ${springdoc.base-path}/swagger-ui.html

openapi:
  title: Order Service APIs
  description: This API enables CRUD operations for order management in a microservices environment, with features like paginated getAllOrders,
    circuit breakers for resilient calls to product and payment services, OAuth2-secured endpoints using client ID and secret,
    actuator-based health monitoring, and Spring State Machine for handling order state transitions.
  version: v1.0
  securityEnabled: true
  servers:
    - description: gateway
      url: ${GATEWAY_URL:http://localhost:8090}
    - description: local
      url: ${ORDER_SERVICE_URL:http://localhost:3001}

# Circuit Breaker configuration for fault-tolerant service interactions
resilience4j.circuitbreaker:
  instances:
    productServiceCircuit:
      slidingWindowSize: 10     # Number of calls to record and analyze.
      failureRateThreshold: 50  # Threshold (in %) at which the circuit opens.
      waitDurationInOpenState: 10000  # Time the circuit stays open before transitioning to HALF_OPEN.
      permittedNumberOfCallsInHalfOpenState: 3 # Number of calls allowed to test the service's health.
      registerHealthIndicator: true   # Enables the actuator health endpoint.