version: '3.8'
services:
  config-server:
    container_name: config-server
    build: #Configuration options that are applied at build time that we defined in the Dockerfile with a relative path
      context: ./config-server
    ports:
      - "8885:8885"
    restart: unless-stopped
    networks:
      - springCloud
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8885/product-service/dev" ]
      interval: 10s
      timeout: 5s
      retries: 5

  service-registry:
    container_name: service-registry
    build:
      context: ./service-registry
    ports:
      - "8761:8761"
    restart: unless-stopped
    networks:
      - springCloud
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
    ports:
      - "8090:8090"
    restart: unless-stopped
    networks:
      - springCloud
    depends_on:
      - config-server
      - service-registry
      - order-service
      - product-service
      - user-service
    environment:
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin-all-in-one:9411/api/v2/spans
      EUREKA.CLIENT.SERVICE-URL.DEFAULTZONE: http://service-registry:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8885
      KEYCLOAK_SERVER_URL: http://keycloak:8080

  zipkin-all-in-one:
    container_name: zipkin-all-in-one
    image: openzipkin/zipkin:latest
    restart: unless-stopped
    ports:
      - "9411:9411"
    networks:
      - springCloud

  mysql-product-db:
    container_name: mysql-product-db
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: product_db
      MYSQL_USER: user
      MYSQL_PASSWORD: test
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - springCloud
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5

  mysql-order-db:
    container_name: mysql-order-db
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_db  # Use a different root password
      MYSQL_DATABASE: order_db
      MYSQL_USER: order_user
      MYSQL_PASSWORD: order_password
    ports:
      - "3307:3306"  # Map to a different port to avoid conflict
    volumes:
      - order_db_data:/var/lib/mysql
    networks:
      - springCloud
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5

  order-service: #This service hasn't container_name because it has 3 replicas
    build:
      context: ./order-service
    restart: unless-stopped
    networks:
      - springCloud
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin-all-in-one:
        condition: service_healthy
      mysql-order-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      replicas: 2
    environment:
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin-all-in-one:9411/api/v2/spans
      EUREKA.CLIENT.SERVICE-URL.DEFAULTZONE: http://service-registry:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8885
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-order-db:3306/order_db?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: order_user
      SPRING_DATASOURCE_PASSWORD: order_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      KAFKA_SERVER_URL: kafka:29092

  product-service:
    container_name: product-service
    build:
      context: ./product-service
    ports:
      - "8002:4005"
    restart: unless-stopped
    networks:
      - springCloud
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin-all-in-one:
        condition: service_healthy
      mysql-product-db:
        condition: service_healthy
    environment:
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin-all-in-one:9411/api/v2/spans
      EUREKA.CLIENT.SERVICE-URL.DEFAULTZONE: http://service-registry:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8885
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-product-db:3306/product_db?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: test
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

  user-service:
    container_name: user-service
    build:
      context: ./user-service
    ports:
      - "8082:8082"
    restart: unless-stopped
    networks:
      - springCloud
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin-all-in-one:
        condition: service_healthy
    environment:
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin-all-in-one:9411/api/v2/spans
      EUREKA.CLIENT.SERVICE-URL.DEFAULTZONE: http://service-registry:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8885
      KEYCLOAK_SERVER_URL: http://keycloak:8080

  postgres-db:
    container_name: postgres-db
    image: postgres:15
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - springCloud
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password

  postgres-payment-db:
    container_name: postgres-payment-db
    image: postgres:15
    restart: unless-stopped
    ports:
      - "5430:5432"
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    networks:
      - springCloud
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: payment_user
      POSTGRES_PASSWORD: payment_password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U payment_user" ]
      timeout: 5s
      retries: 5

  payment-service:
    container_name: payment-service
    build:
      context: ./payment-service
    restart: unless-stopped
    networks:
      - springCloud
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin-all-in-one:
        condition: service_healthy
      postgres-payment-db:
        condition: service_healthy
    environment:
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin-all-in-one:9411/api/v2/spans
      EUREKA.CLIENT.SERVICE-URL.DEFAULTZONE: http://service-registry:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8885
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-payment-db:5432/payment_db
      SPRING_DATASOURCE_USERNAME: payment_user
      SPRING_DATASOURCE_PASSWORD: payment_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

  keycloak-server:
    container_name: keycloak-server
    hostname: keycloak
    image: quay.io/keycloak/keycloak:23.0
    volumes:
      - ./imports/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "9090:8080"
    command:
      - start-dev
      - --transaction-xa-enabled=false
      - --import-realm
    depends_on:
      - postgres-db
    networks:
      - springCloud
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

  redis:
    container_name: redis
    image: bitnami/redis:latest
    ports:
      - "6379:6379"
    networks:
      - springCloud
    environment:
      ALLOW_EMPTY_PASSWORD: yes

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.2.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    networks:
      - springCloud
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.2.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    networks:
      - springCloud
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  springCloud:
    driver: bridge
    name: springCloud

volumes:
  postgres_data:
    driver: local
  payment_db_data:
    driver: local
  mysql_data:
    driver: local
  order_db_data:
    driver: local