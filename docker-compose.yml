# Define a reusable Healthcheck
x-healthcheck: &default-healthcheck
  interval: 10s
  timeout: 10s
  retries: 10
  start_period: 20s

x-environment: &default-environment
  SPRING_PROFILE: dev
  MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
  EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://service-registry:8761/eureka/
  CONFIG_SERVER_URL: http://config-server:8885
  KEYCLOAK_SERVER_URL: http://keycloak:8080

x-default-service: &default-service
  restart: unless-stopped
  networks:
    - ecommerce-network
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  config-server:
    <<: *default-service
    container_name: config-server
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: config-server
        PORT: 8885
    ports:
      - "8885:8885" # Only for dev, eliminate in prod
    environment:
      SPRING_PROFILE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: classpath:/config/,classpath:/config/shared/
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "curl", "-f", "http://localhost:8885/actuator/health" ]

  service-registry:
    <<: *default-service
    container_name: service-registry
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: service-registry
        PORT: 8761
    ports:
      - "8761:8761" # Only for dev, eliminate in prod
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]

  api-gateway:
    <<: *default-service
    container_name: api-gateway
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: api-gateway
        PORT: 8090
    ports:
      - "8090:8090" # Only for dev, eliminate in prod
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    environment:
      <<: *default-environment
      CORS_ALLOWED_ORIGINS: http://localhost:9090,http://example.com
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  zipkin: # Distributed Tracing (Zipkin)
    <<: *default-service
    container_name: zipkin
    image: openzipkin/zipkin:2.24.0
    ports:
      - "9411:9411" # Only for dev, eliminate in prod
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "curl", "-f", "http://localhost:9411/actuator/health" ]

  mysql-product-db:
    <<: *default-service
    container_name: mysql-product-db
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PRODUCT_ROOT_PASSWORD}
      MYSQL_DATABASE: product_db
      MYSQL_USER: ${MYSQL_PRODUCT_USER}
      MYSQL_PASSWORD: ${MYSQL_PRODUCT_PASSWORD}
    ports:
      - "3306:3306" # Only for dev, eliminate in prod
    volumes:
      - mysql_product_data:/var/lib/mysql
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_PRODUCT_USER}", "-p${MYSQL_PRODUCT_PASSWORD}" ]

  mysql-order-db:
    <<: *default-service
    container_name: mysql-order-db
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ORDER_ROOT_PASSWORD}
      MYSQL_DATABASE: order_db
      MYSQL_USER: ${MYSQL_ORDER_USER}
      MYSQL_PASSWORD: ${MYSQL_ORDER_PASSWORD}
    ports:
      - "3307:3306"  # Map to a different port to avoid conflict
    volumes:
      - mysql_order_data:/var/lib/mysql
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_ORDER_USER}", "-p${MYSQL_ORDER_PASSWORD}" ]

  order-service: #This service hasn't container_name because it has 2 replicas
    <<: *default-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: order-service
        PORT: 8080
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin:
        condition: service_started
        restart: true
      mysql-order-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      replicas: 2
    environment:
      <<: *default-environment
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-order-db:3306/order_db?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_ORDER_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ORDER_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      KAFKA_SERVER_URL: kafka:29092

  product-service:
    <<: *default-service
    container_name: product-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: product-service
        PORT: 4005
    ports:
      - "8002:4005" # Only for dev, eliminate in prod
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin:
        condition: service_started
        restart: true
      mysql-product-db:
        condition: service_healthy
    environment:
      <<: *default-environment
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-product-db:3306/product_db?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_PRODUCT_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PRODUCT_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

  user-service:
    <<: *default-service
    container_name: user-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: user-service
        PORT: 8082
    ports:
      - "8082:8082" # Only for dev, eliminate in prod
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin:
        condition: service_started
        restart: true
      keycloak-server:
        condition: service_healthy
    environment:
      <<: *default-environment

  postgres-keycloak-db:
    <<: *default-service
    container_name: postgres-keycloak-db
    image: postgres:15
    ports:
      - "5432:5432" # Only for dev, eliminate in prod
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "pg_isready", "-U", "postgres" ]

  postgres-payment-db:
    <<: *default-service
    container_name: postgres-payment-db
    image: postgres:15
    ports:
      - "5430:5432" # Only for dev, eliminate in prod
    volumes:
      - postgres_payment_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: ${POSTGRES_PAYMENT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PAYMENT_PASSWORD}
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_PAYMENT_USER} -d payment_db" ]

  payment-service:
    <<: *default-service
    container_name: payment-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: payment-service
        PORT: 8080
    depends_on:
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin:
        condition: service_started
        restart: true
      postgres-payment-db:
        condition: service_healthy
    environment:
      <<: *default-environment
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-payment-db:5432/payment_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_PAYMENT_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PAYMENT_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

  keycloak-server:
    <<: *default-service
    container_name: keycloak-server
    hostname: keycloak
    image: quay.io/keycloak/keycloak:23.0.6
    volumes:
      - ./config/imports/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "9090:8080" # Only for dev, eliminate in prod
    command:
      - start-dev
      - --transaction-xa-enabled=false
      - --import-realm
    depends_on:
      postgres-keycloak-db:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak-db:5432/keycloak
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_ENABLED: true
      KC_PROXY: none
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED:  true
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'" ]
      interval: 30s
      timeout: 5s
      retries: 20

  redis:
    <<: *default-service
    container_name: redis
    image: bitnami/redis:8.0
    ports:
      - "6379:6379" # Only for dev, eliminate in prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]

  zookeeper:
    <<: *default-service
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.2.0
    hostname: zookeeper
    ports:
      - "2181:2181" # Only for dev, eliminate in prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]

  kafka:
    <<: *default-service
    image: confluentinc/cp-kafka:7.2.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092" # Only for dev, eliminate in prod
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]

networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce-network

volumes:
  postgres_keycloak_data:
    driver: local
  postgres_payment_data:
    driver: local
  mysql_product_data:
    driver: local
  mysql_order_data:
    driver: local